using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Text;
using System.Threading;
using System.Net;

#if UNITY_EDITOR
using UnityEditor;
#endif

namespace StreamingMesh {

	[Serializable]
	public class AuthInfo {
		public string auth;
	}

	[ExecuteInEditMode]
    public class STMHttpBaseSerializer : MonoBehaviour {

        public string address = "http://127.0.0.1:8080/channels/";
        public string channel = "";
        [HideInInspector]
        public string authCode = "";

        public readonly Queue<Action> executeOnUpdate = new Queue<Action>();
		public readonly Queue<KeyValuePair<string, byte[]>> requestBuffer = new Queue<KeyValuePair<string, byte[]>>();
		bool waitResponse = false;

		Thread thread;

		protected void Send(string query, byte[] data, bool isAuth) {
#if UNITY_EDITOR
			executeOnUpdate.Enqueue(() => {
				_Send(query, data, true, isAuth);
			});
#endif
		}

		protected void Send(string query, string message, bool isAuth) {
#if UNITY_EDITOR
			executeOnUpdate.Enqueue(() => {
				byte[] data = Encoding.UTF8.GetBytes(message);
				_Send(query, data, false, isAuth);
			});
#endif
		}

		protected void Request(string filename) {
			executeOnUpdate.Enqueue(() => {
				requestBuffer.Enqueue(new KeyValuePair<string, byte[]>(filename, _Request(filename, true)));
			});
		}
			

		byte[] _Request(string URL, bool isBinary) {
			//string addr = address + channel + "/" + fileName;
			string addr = URL;
			Debug.Log("REQ: " + addr);
			try {
				WebRequest req = WebRequest.Create(addr);
				req.ContentType = (isBinary ? "application/octet-stream" : "text/plain");
				req.Method = "GET";
				waitResponse = true;
				req.Timeout = 10000;

				WebResponse res = req.GetResponse();
				Stream resStream = res.GetResponseStream();
				byte[] buf = new byte[4 * 1024 * 1024];
				using(MemoryStream ms = new MemoryStream()) {
					int readByte;
					while((readByte = resStream.Read(buf, 0, buf.Length)) > 0) {
						ms.Write(buf, 0, readByte);
					}
					ms.Flush();
					waitResponse = false;
					return ms.ToArray();
				}
			} catch(WebException we) {
				Debug.LogError(we.Message);
			}
			waitResponse = false;
			return null;
		}

#if UNITY_EDITOR
		void _Send(string query, byte[] data, bool isBinary, bool isAuth) {
			if(isAuth && authCode == "") {
				Debug.LogError("Authentication failed in initial sending!");
				return;
			}
			string addr = address + channel + "/?" + 
				(isAuth ? "auth=" + this.authCode + "&" : "") + query;
			Debug.Log("SEND: " + addr);
			try {
				WebRequest req = WebRequest.Create(addr);
				req.ContentType = "application/" + (isBinary ? "octet-stream" : "json");
                req.Method = "POST";
				req.ContentLength = data.Length;
				waitResponse = true;
				req.Timeout = 10000;

				Stream reqStream = req.GetRequestStream();
				reqStream.Write(data, 0, data.Length);
				reqStream.Close();

				WebResponse res = req.GetResponse();
				Stream resStream = res.GetResponseStream();
				StreamReader sr = new StreamReader(resStream);
				string val = sr.ReadToEnd();
				if(!isAuth) {
					AuthInfo ai = JsonUtility.FromJson<AuthInfo>(val);
					this.authCode = ai.auth;
				}
				//Debug.Log(val);
				sr.Close();
				resStream.Close();
			} catch(WebException we) {
				Debug.LogError(we.Message);
			}

			waitResponse = false;
		}
#endif

		protected virtual void ProcessRequestedData(KeyValuePair<string, byte[]> pair) {
		}

		void OnValidate() {
            if (channel.Length == 0) {
                System.Random random = new System.Random();
                const string chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
                channel = "channel_" + new string(Enumerable.Repeat(chars, 8)
                  .Select(s => s[random.Next(s.Length)]).ToArray());
            }
        }

		void OnEnable() {
			thread = new Thread(ThreadUpdate);
			try {
				thread.Start();
			} catch(ThreadStartException ex) {
				Debug.LogError(ex.Source);
			}
		}

		void OnDisable() {
			if(thread != null) {
				thread.Abort();
			}
		}

		void ThreadUpdate() {
			while(true) {
				Thread.Sleep(0);
				lock (executeOnUpdate) {
					if(executeOnUpdate.Count > 0 && waitResponse == false) {
						executeOnUpdate.Dequeue().Invoke();
					}
				}
			}
		}

		void Update() {
			if (requestBuffer.Count > 0) {
				ProcessRequestedData(requestBuffer.Dequeue());
			}
		}
    }

}